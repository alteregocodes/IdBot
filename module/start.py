from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo, InputMediaPhoto, Message
import re

# Dictionary to keep track of user state
user_states = {}

def register_handlers(app: Client):
    @app.on_message(filters.command("start"))
    async def start(client, message):
        buttons = [
            [InlineKeyboardButton("Support Channel", url="https://t.me/supportchannel")],
            [InlineKeyboardButton("Bantuan", callback_data="help"), InlineKeyboardButton("Donasi", callback_data="donasi")],
            [InlineKeyboardButton("Ambil String", callback_data="ambil_string")],
        ]
        video_url = "https://telegra.ph/file/35cf8363e5b42adf1ca94.mp4"
        caption = "Selamat datang di bot kami!"

        await client.send_video(
            chat_id=message.chat.id,
            video=video_url,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    @app.on_callback_query(filters.regex("ambil_string"))
    async def handle_ambil_string(client, callback_query):
        ask_ques = "**» Pilih Jenis String yang Ingin Dibuat**"
        buttons_ques = [
            [
                InlineKeyboardButton("𝙿𝚈𝚁𝙾𝙶𝚁𝙰𝙼 💗", callback_data="pyrogram"),
                InlineKeyboardButton("𝙿𝚈𝚁𝙾𝙶𝚁𝙰𝙼 𝚅2 💗", callback_data="pyrogram_v2"),
            ],
            [InlineKeyboardButton("𝚃𝙴𝙻𝙴𝚃𝙷𝙾𝙽 💻", callback_data="telethon")],
            [
                InlineKeyboardButton("𝙿𝚈𝚁𝙾𝙶𝚁𝙰𝙼 𝙱𝙾𝚃 🤖", callback_data="pyrogram_bot"),
                InlineKeyboardButton("𝚃𝙴𝙻𝙴𝚃𝙷𝙾𝙽 𝙱𝙾𝚃 🤖", callback_data="telethon_bot"),
            ],
            [InlineKeyboardButton("Kembali", callback_data="back_to_start")],
        ]
        await callback_query.message.edit(ask_ques, reply_markup=InlineKeyboardMarkup(buttons_ques))

    @app.on_callback_query(filters.regex("pyrogram|pyrogram_v2|telethon|telethon_bot|pyrogram_bot"))
    async def handle_session_type(client, callback_query):
        user_id = callback_query.from_user.id
        session_type = callback_query.data

        user_states[user_id] = {"step": "api_id", "session_type": session_type}
        await callback_query.message.edit("» Please send your **API_ID**.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel", callback_data="cancel")]]))

    @app.on_message(filters.text & filters.private)
    async def handle_input(client: Client, message: Message):
        user_id = message.from_user.id
        state = user_states.get(user_id)

        if state:
            if state["step"] == "api_id":
                api_id = message.text
                if api_id.isdigit():
                    user_states[user_id]["api_id"] = int(api_id)
                    user_states[user_id]["step"] = "api_hash"
                    await message.reply("Please send your **API_HASH**.")
                else:
                    await message.reply("**API_ID** must be an integer. Please try again.")

            elif state["step"] == "api_hash":
                api_hash = message.text
                user_states[user_id]["api_hash"] = api_hash
                user_states[user_id]["step"] = "phone_number"
                
                is_bot = "bot" in state["session_type"]
                prompt = "Please enter your phone number to proceed:\nExample: `+62 62xxxxxxXX`" if not is_bot else "Please send your **BOT_TOKEN** to continue."
                await message.reply(prompt)

            elif state["step"] == "phone_number":
                phone_number = message.text
                user_states[user_id]["phone_number"] = phone_number
                user_states[user_id]["step"] = "otp"
                
                await message.reply("Trying to send OTP to the given number...")
                # Proceed with OTP request and verification here

            elif state["step"] == "otp":
                otp_code = message.text
                # Handle OTP verification and session generation here

                # After successful generation
                string_session = "GeneratedStringSessionHere"  # Replace with actual session generation logic
                text = f"**This is your string session** \n\n`{string_session}` \n\n**Generated by : [𝗗𝗔𝗫𝗫](https://t.me/YourExDestiny) WARNING :** Don't share with anyone even if with you 🏴‍☠️"
                try:
                    await message.reply(text)
                except KeyError:
                    pass
                user_states.pop(user_id)  # Clean up the user state after completion

    @app.on_callback_query(filters.regex("cancel"))
    async def handle_cancel(client, callback_query):
        user_id = callback_query.from_user.id
        user_states.pop(user_id, None)
        await callback_query.message.edit("**Session generation process cancelled.**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Generate Another Session", callback_data="ambil_string")]]))

    @app.on_callback_query(filters.regex("help"))
    async def handle_help(client, callback_query):
        help_message = """
**Daftar Perintah:**

/tts <teks> - Mengubah teks menjadi suara dengan bahasa yang dipilih.
/bahasatts - Mengatur bahasa untuk Text-to-Speech (TTS).
/id - Menampilkan ID Anda dan ID grup (jika di grup).
/carbon <kode> - Membuat gambar "carbon" dari kode yang diberikan.
/song <judul lagu/tautan YouTube> - Mengunduh dan mengirim file audio dari lagu atau tautan YouTube.
/vsong <judul video/tautan YouTube> - Mengunduh dan mengirim file video dari video atau tautan YouTube.

**Cara Mendapatkan ID Channel/Grup:**
Forward pesan dari channel/grup ke bot ini, atau gunakan perintah /id jika di dalamnya.

**Cara Mendapatkan String Session Telegram:**
Untuk mendapatkan string session Telegram Anda, Anda perlu membuatnya menggunakan salah satu opsi di bawah menu "Ambil String" yang telah kami sediakan sebelumnya. Ikuti petunjuk untuk memasukkan kredensial API Anda (API_ID, API_HASH), dan opsional nomor telepon atau token bot Anda. Bot akan memandu Anda melalui proses untuk menghasilkan dan mendapatkan string session Anda.

Klik tombol "Kembali" untuk kembali ke pesan sebelumnya.
"""
        back_button = InlineKeyboardButton("Kembali", callback_data="back_to_start")
        await callback_query.message.edit(help_message, reply_markup=InlineKeyboardMarkup([[back_button]]))

    @app.on_callback_query(filters.regex("donasi"))
    async def handle_donasi(client, callback_query):
        buttons_donasi = [
            [InlineKeyboardButton("Dana", callback_data="dana")],
            [InlineKeyboardButton("Qris", callback_data="qris")],
            [InlineKeyboardButton("Kembali", callback_data="back_to_start")],
        ]
        await callback_query.message.edit("Pilih metode donasi:", reply_markup=InlineKeyboardMarkup(buttons_donasi))

    @app.on_callback_query(filters.regex("dana"))
    async def handle_dana(client, callback_query):
        dana_message = """
❏ Dana
└ 081398871823
"""
        back_button = InlineKeyboardButton("Kembali", callback_data="donasi")
        await callback_query.message.edit(dana_message, reply_markup=InlineKeyboardMarkup([[back_button]]))

    @app.on_callback_query(filters.regex("qris"))
    async def handle_qris(client, callback_query):
        qris_url = "https://telegra.ph/file/b7d573cf44413a1bf0b42.jpg"
        caption = "Scan QRIS untuk donasi:"
        back_button = InlineKeyboardButton("Kembali", callback_data="donasi")

        await callback_query.message.edit_media(
            media=InputMediaPhoto(media=qris_url, caption=caption),
            reply_markup=InlineKeyboardMarkup([[back_button]])
        )

    @app.on_callback_query(filters.regex("back_to_start"))
    async def handle_back_to_start(client, callback_query):
        buttons = [
            [InlineKeyboardButton("Support Channel", url="https://t.me/supportchannel")],
            [InlineKeyboardButton("Bantuan", callback_data="help"), InlineKeyboardButton("Donasi", callback_data="donasi")],
            [InlineKeyboardButton("Ambil String", callback_data="ambil_string")],
        ]
        video_url = "https://telegra.ph/file/35cf8363e5b42adf1ca94.mp4"
        caption = "Selamat datang di bot kami!"

        await callback_query.message.edit_media(
            media=InputMediaVideo(media=video_url, caption=caption),
            reply_markup=InlineKeyboardMarkup(buttons)
        )
